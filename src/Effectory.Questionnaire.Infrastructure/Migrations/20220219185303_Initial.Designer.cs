// <auto-generated />
using Effectory.Questionnaire.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Effectory.Questionnaire.Infrastructure.Migrations
{
    [DbContext(typeof(QuestionnaireDbContext))]
    [Migration("20220219185303_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnsweredByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 3807638L,
                            DisplayOrder = 0,
                            SubjectId = 2605515L,
                            Text = "{\"nl-NL\":\"Ik ben blij met mijn werk\",\"en-US\":\"I am happy with my work\"}"
                        },
                        new
                        {
                            Id = 3807643L,
                            DisplayOrder = 1,
                            SubjectId = 2605515L,
                            Text = "{\"en-US\":\"I enjoy doing my work\",\"nl-NL\":\"Ik doe mijn werk met plezier\"}"
                        },
                        new
                        {
                            Id = 3851855L,
                            DisplayOrder = 2,
                            SubjectId = 2605515L,
                            Text = "{\"nl-NL\":\"Ik vind mijn werk uitdagend\",\"en-US\":\"My work is enjoyably challenging\"}"
                        },
                        new
                        {
                            Id = 3807701L,
                            DisplayOrder = 3,
                            SubjectId = 2605515L,
                            Text = "{\"nl-NL\":\"Ik heb voldoende verantwoordelijkheid in mijn werk\",\"en-US\":\"I have sufficient responsibilities in my work\"}"
                        },
                        new
                        {
                            Id = 3807644L,
                            DisplayOrder = 4,
                            SubjectId = 2605515L,
                            Text = "{\"nl-NL\":\"Ik heb het gevoel dat ik met mijn werk een bijdrage lever\",\"en-US\":\"I feel I contribute meaningfully through my work\"}"
                        },
                        new
                        {
                            Id = 3851843L,
                            DisplayOrder = 0,
                            SubjectId = 2605516L,
                            Text = "{\"nl-NL\":\"Ik weet hoe mijn werk bijdraagt aan de visie en doelen van Organisatie\",\"en-US\":\"It is clear to me how my work contributes to the organisation's strategy\"}"
                        },
                        new
                        {
                            Id = 3851856L,
                            DisplayOrder = 1,
                            SubjectId = 2605516L,
                            Text = "{\"nl-NL\":\"Ik geef in de dagelijkse praktijk feedback aan de mensen met wie ik samenwerk\",\"en-US\":\"I give feedback to the people I work with in the daily practice of work\"}"
                        },
                        new
                        {
                            Id = 3810105L,
                            DisplayOrder = 2,
                            SubjectId = 2605516L,
                            Text = "{\"nl-NL\":\"Als je deze organisatie één tip mag geven, wat zou dat dan zijn?\",\"en-US\":\"If you could give this organisation one tip, what would it be?\"}"
                        });
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.QuestionAnswerOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswerOptions");

                    b.HasData(
                        new
                        {
                            Id = 17969124L,
                            DisplayOrder = 0,
                            QuestionId = 3807638L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 17969123L,
                            DisplayOrder = 1,
                            QuestionId = 3807638L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 17969122L,
                            DisplayOrder = 2,
                            QuestionId = 3807638L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 17969121L,
                            DisplayOrder = 3,
                            QuestionId = 3807638L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 17969120L,
                            DisplayOrder = 4,
                            QuestionId = 3807638L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = 17969149L,
                            DisplayOrder = 0,
                            QuestionId = 3807643L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 17969148L,
                            DisplayOrder = 1,
                            QuestionId = 3807643L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 17969147L,
                            DisplayOrder = 2,
                            QuestionId = 3807643L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 17969146L,
                            DisplayOrder = 3,
                            QuestionId = 3807643L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 17969145L,
                            DisplayOrder = 4,
                            QuestionId = 3807643L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = 18166389L,
                            DisplayOrder = 0,
                            QuestionId = 3851855L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 18166388L,
                            DisplayOrder = 1,
                            QuestionId = 3851855L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 18166387L,
                            DisplayOrder = 2,
                            QuestionId = 3851855L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 18166386L,
                            DisplayOrder = 3,
                            QuestionId = 3851855L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 18166385L,
                            DisplayOrder = 4,
                            QuestionId = 3851855L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = 17969415L,
                            DisplayOrder = 0,
                            QuestionId = 3807701L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 17969414L,
                            DisplayOrder = 1,
                            QuestionId = 3807701L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 17969413L,
                            DisplayOrder = 2,
                            QuestionId = 3807701L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 17969412L,
                            DisplayOrder = 3,
                            QuestionId = 3807701L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 17969411L,
                            DisplayOrder = 4,
                            QuestionId = 3807701L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = 17969154L,
                            DisplayOrder = 0,
                            QuestionId = 3807644L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 17969153L,
                            DisplayOrder = 1,
                            QuestionId = 3807644L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 17969152L,
                            DisplayOrder = 2,
                            QuestionId = 3807644L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 17969151L,
                            DisplayOrder = 3,
                            QuestionId = 3807644L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 17969150L,
                            DisplayOrder = 4,
                            QuestionId = 3807644L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = 18166291L,
                            DisplayOrder = 0,
                            QuestionId = 3851843L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 18166290L,
                            DisplayOrder = 1,
                            QuestionId = 3851843L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 18166289L,
                            DisplayOrder = 2,
                            QuestionId = 3851843L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 18166288L,
                            DisplayOrder = 3,
                            QuestionId = 3851843L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 18166287L,
                            DisplayOrder = 4,
                            QuestionId = 3851843L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = 18166394L,
                            DisplayOrder = 0,
                            QuestionId = 3851856L,
                            Text = "{\"nl-NL\":\"Helemaal mee oneens\",\"en-US\":\"Strongly disagree\"}"
                        },
                        new
                        {
                            Id = 18166393L,
                            DisplayOrder = 1,
                            QuestionId = 3851856L,
                            Text = "{\"nl-NL\":\"Mee oneens\",\"en-US\":\"Disagree\"}"
                        },
                        new
                        {
                            Id = 18166392L,
                            DisplayOrder = 2,
                            QuestionId = 3851856L,
                            Text = "{\"nl-NL\":\"Niet mee eens/ niet mee oneens\",\"en-US\":\"Neither agree nor disagree\"}"
                        },
                        new
                        {
                            Id = 18166391L,
                            DisplayOrder = 3,
                            QuestionId = 3851856L,
                            Text = "{\"nl-NL\":\"Mee eens\",\"en-US\":\"Agree\"}"
                        },
                        new
                        {
                            Id = 18166390L,
                            DisplayOrder = 4,
                            QuestionId = 3851856L,
                            Text = "{\"nl-NL\":\"Helemaal mee eens\",\"en-US\":\"Strongly agree\"}"
                        },
                        new
                        {
                            Id = -1L,
                            DisplayOrder = 0,
                            QuestionId = 3810105L
                        });
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.RootQuestionnaire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Questionnaires");

                    b.HasData(
                        new
                        {
                            Id = 1000L
                        });
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 2605515L,
                            DisplayOrder = 0,
                            Text = "{\"nl-NL\":\"Mijn werk\",\"en-US\":\"My work\"}"
                        },
                        new
                        {
                            Id = 2605516L,
                            DisplayOrder = 1,
                            Text = "{\"nl-NL\":\"Mijn rol\",\"en-US\":\"My role\"}"
                        });
                });

            modelBuilder.Entity("RootQuestionnaireSubject", b =>
                {
                    b.Property<long>("QuestionnairesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectsId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionnairesId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("RootQuestionnaireSubject");
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Effectory.Questionnaire.Domain.Entities.QuestionAnswerOption", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Effectory.Questionnaire.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Question", b =>
                {
                    b.HasOne("Effectory.Questionnaire.Domain.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.QuestionAnswerOption", b =>
                {
                    b.HasOne("Effectory.Questionnaire.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("RootQuestionnaireSubject", b =>
                {
                    b.HasOne("Effectory.Questionnaire.Domain.Entities.RootQuestionnaire", null)
                        .WithMany()
                        .HasForeignKey("QuestionnairesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Effectory.Questionnaire.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.QuestionAnswerOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Effectory.Questionnaire.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
